# This file is a part of easifem-base
# (c) 2021, all right reserved, Dr Vikas Sharma
#
# log
# 17/02/2021 this file was created
#-----------------------------------------------------------------------

CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0 FATAL_ERROR)
SET(PROJECT_NAME "Sparsekit")
PROJECT(${PROJECT_NAME})
ENABLE_LANGUAGE(Fortran)
SET(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
SET(namespace "${PROJECT_NAME}")
SET(VERSION_MAJOR "1")
SET(VERSION_MINOR "0")
SET(VERSION_BugFix "0")
SET(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BugFix})
SET(CMAKE_PROJECT_DESCRIPTION "A basic tool-kit for sparse matrix computations")
SET(CMAKE_PROJECT_HOMEPAGE_URL "https://www-users.cs.umn.edu/~saad/software/SPARSKIT/")
INCLUDE(CMakePrintHelpers)
#BUILD_TYPE
OPTION(BUILD_SHARED_LIBS "Build shared library" ON)
IF(BUILD_SHARED_LIBS)
  MESSAGE(STATUS "${PROJECT_NAME} will be built as a shared library.")
ELSE()
  MESSAGE(STATUS "${PROJECT_NAME} will be built as a static library.")
ENDIF()

# COMPILER RELATED OPTIONS
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
ENDIF()

IF(CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
  LIST(APPEND FORTRAN_FLAGS "-O3" "-std=legacy" "-fPIC" "-fno-trapping-math" "-mtune=native")
  MESSAGE(STATUS "Fortran flag ${FORTRAN_FLAGS}")
  # SET(ppd "-cpp") # SET(openmp "-fopenmp")
  # SET(openacc "-fopenacc") # SET(bounds "-fbounds-check")
ENDIF()

IF(CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
ENDIF()

IF(CMAKE_Fortran_COMPILER_ID MATCHES "PGI")
ENDIF()

# CREATING DIRECTORIES
INCLUDE(GNUInstallDirs)
SET(CMAKE_Fortran_MODULE_DIRECTORY
  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY
  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY
  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

SET(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH "install location of lib")
SET(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH "install location of include")
SET(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH "install location of bin")

IF(WIN32 AND NOT CYGWIN)
  SET(DEF_INSTALL_CMAKEDIR CMake)
ELSE()
  SET(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})
ENDIF()
SET(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH "Installation directory for CMake files")

FOREACH(p LIB BIN INCLUDE CMAKE)
  FILE(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path)
  MESSAGE(STATUS "Installing ${p} componenets to ${_path}")
ENDFOREACH()
#
IF(BUILD_SHARED_LIBS)
  ADD_LIBRARY(${PROJECT_NAME} SHARED "" )
ELSE()
  ADD_LIBRARY(${PROJECT_NAME} STATIC "")
ENDIF()
# INSTALLING easifem-extpkgs
SET(SRC_PATH "${CMAKE_CURRENT_LIST_DIR}/src/")
LIST(APPEND _SOURCES
  ${SRC_PATH}apl.f
  ${SRC_PATH}blassm.f
  ${SRC_PATH}ccn.f
  ${SRC_PATH}color.f
  ${SRC_PATH}dinfo13.f
  ${SRC_PATH}dsepart.f
  ${SRC_PATH}formats.f
  ${SRC_PATH}ilut.f
  ${SRC_PATH}infofun.f
  ${SRC_PATH}inout.f
  ${SRC_PATH}iters.f
  ${SRC_PATH}matvec.f
  ${SRC_PATH}unary.f
)
TARGET_SOURCES(
  ${PROJECT_NAME} PRIVATE
  "${_SOURCES}"
)
# install openblas
SET(BLA_VENDOR "OpenBLAS")
FIND_PACKAGE( LAPACK REQUIRED )
IF( LAPACK_FOUND )
  MESSAGE(STATUS "LAPACK_LIBRARIES found")
ENDIF()
#
#SET(BLA_VENDOR "OpenBLAS")
FIND_PACKAGE( BLAS REQUIRED )
IF( BLAS_FOUND )
  MESSAGE(STATUS "FOUND BLAS")
  MESSAGE(STATUS "BLAS_LIBRARIES ${BLAS_LIBRARIES}")
ENDIF()
FIND_PACKAGE( LAPACK REQUIRED )
IF( LAPACK_FOUND )
  MESSAGE(STATUS "FOUND LAPACK")
  MESSAGE(STATUS "BLAS_LIBRARIES ${BLAS_LIBRARIES}")
  MESSAGE(STATUS "LAPACK_LIBRARIES ${LAPACK_LIBRARIES}")
ENDIF()
TARGET_LINK_LIBRARIES(
  ${PROJECT_NAME} PUBLIC ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}
)
#
TARGET_INCLUDE_DIRECTORIES(
  ${PROJECT_NAME}
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_Fortran_MODULE_DIRECTORY}>
  $<INSTALL_INTERFACE:${INSTALL_INCLUDEDIR}>
)
#
TARGET_COMPILE_OPTIONS(
  ${PROJECT_NAME}
  PRIVATE
  ${FORTRAN_FLAGS}
)
#
SET_TARGET_PROPERTIES(
  ${PROJECT_NAME}
  PROPERTIES
  POSITION_INDEPENDENT_CODE 1
  SOVERSION ${VERSION_MAJOR}
  OUTPUT_NAME ${PROJECT_NAME}
  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
  ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
  MACOSX_RPATH ON
  WINDOWS_EXPORT_ALL_SYMBOLS ON
)
#
INSTALL(
  TARGETS
    ${PROJECT_NAME}
  EXPORT
    ${TARGETS_EXPORT_NAME}
  ARCHIVE
    DESTINATION ${INSTALL_LIBDIR}
    COMPONENT lib
  RUNTIME
    DESTINATION ${INSTALL_BINDIR}
    COMPONENT bin
  LIBRARY
    DESTINATION ${INSTALL_LIBDIR}
    COMPONENT lib
)
#
INSTALL(
  DIRECTORY
    ${CMAKE_Fortran_MODULE_DIRECTORY}
    DESTINATION "./"
    COMPONENT lib
)
#
INSTALL(
  EXPORT
    ${TARGETS_EXPORT_NAME}
    NAMESPACE ${namespace}::
    DESTINATION ${INSTALL_CMAKEDIR}
    COMPONENT dev
)
#
INCLUDE(CMakePackageConfigHelpers)
write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY SameMajorVersion
)
#
configure_package_config_file(
  ${CMAKE_CURRENT_LIST_DIR}/cmake/Config.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
  INSTALL_DESTINATION ${INSTALL_CMAKEDIR}
)
#
INSTALL(
  FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
  DESTINATION
    ${INSTALL_CMAKEDIR}
)
